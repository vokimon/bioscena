#:vim set syntax=python

import os

options = Variables('options.cache', ARGUMENTS)
options.Add(BoolVariable('verbose', 'Display the full command line instead a short command description', 'no') )
options.Add(BoolVariable('qtunit', 'Use the qt based test runner', 'no') )

env = Environment(ENV=os.environ, tools=['default'], options=options)
options.Save('../options.cache', env)
Help(options.GenerateHelpText(env))
env.SConsignFile() # Single signature file
env.Tool('qt4', toolpath=['..'])

env['CXXFILESUFFIX'] = '.cxx'
env['QT4_UICDECLSUFFIX'] = '.hxx'
env['QT4_MOCHPREFIX'] = os.path.join('moc_')
env['QT4_UICDECLPREFIX'] = os.path.join('uic_')
env['QT4_QRCCXXPREFIX'] = os.path.join('qrc_')
def blue(str):
    return u'\033[34m== '+str+u'\033[0m'
if not env['verbose']:
    env['CXXCOMSTR'] = blue('Compiling $SOURCE')
    env['LINKCOMSTR'] = blue('Linking $TARGET')
    env['SHLINKCOMSTR'] = blue('Linking library $TARGET')
    env['QT4_RCCCOMSTR'] = blue('Embeding resources $SOURCE')
    env['QT4_UICCOMSTR'] = blue('Compiling interface $SOURCE')
    env['QT4_LRELEASECOMSTR'] = blue('Compiling translation $TARGET')
    env['QT4_MOCFROMHCOMSTR'] = blue('Generating metaobjects for $SOURCE')
    env['QT4_MOCFROMCXXCOMSTR'] = blue('Generating metaobjects for $SOURCE')

env.EnableQt4Modules([
    'QtCore',
    'QtGui',
    'QtOpenGL',
], debug=False)

env.ParseConfig('pkg-config cppunit --cflags --libs')
env.Append(CCFLAGS = ["-g","-O3"])
if env['qtunit'] :
	env.ParseConfig('pkg-config qt-mt --cflags --libs')
	env.Append(LIBS = ['qttestrunner'])
	env.Append(CCFLAGS = ["-DGUI_ENABLED"])

env.Append(BUILDERS = {'Test' : Builder(action = "./$SOURCE && touch $TARGET")})

Import('sources', 'testSources', 'includePath')
env.Append(CPPPATH = includePath)


env.Program('#bioscenatests', testSources),
env.Default( [
	env.Program('#bioscena', sources),
	env.Test('#bioscenatests.passed', '#bioscenatests' ),
])



